[
  {
    "attachments": {},
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## HRA API Usage\n",
      "This notebook shows how to use the HRA API method calls provided by the `hra_api_client` package. We will show how to set up the client and make a few calls. Refer to the usage notebook [here](https://github.com/x-atlas-consortia/hra-api/blob/main/notebooks/hra-api-client-usage.ipynb) and to the API documentation on <https://apps.humanatlas.io/api/> for additional documentation, methods, and examples."
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "### Install package\n",
      "For this notebook, we'll install the `hra-api-client` and a set of HRA UI widgets called `hra-jupyter-widgets`."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "%pip install hra-api-client hra-jupyter-widgets"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "<a id='imports'></a>\n",
      "### Imports \n",
      "\n",
      "We import the hra-api-client as follows:"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "import hra_api_client"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "Although we can use hra-api-client for all our tasks, it is easier if we have individual imports as follows:"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "from hra_api_client.api import v1_api\n",
      "from hra_api_client.api import hra_pop_api\n",
      "from hra_api_client.api import ds_graph_api\n",
      "from hra_api_client.models.aggregate_count import AggregateCount\n",
      "from hra_api_client.models.database_status import DatabaseStatus\n",
      "from hra_api_client.models.error_message import ErrorMessage\n",
      "from hra_api_client.models.flat_spatial_placement import FlatSpatialPlacement\n",
      "from hra_api_client.models.get_spatial_placement_request import GetSpatialPlacementRequest\n",
      "from hra_api_client.models.min_max import MinMax\n",
      "from hra_api_client.models.ontology_tree import OntologyTree\n",
      "from hra_api_client.models.sparql_query_request import SparqlQueryRequest\n",
      "from hra_api_client.models.spatial_entity import SpatialEntity\n",
      "from hra_api_client.models.spatial_scene_node import SpatialSceneNode\n",
      "from hra_api_client.models.spatial_search import SpatialSearch\n",
      "from hra_api_client.models.tissue_block import TissueBlock"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "For the purposes of this demonstration we need some other libraries imported here: "
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "import time\n",
      "from pprint import pprint\n",
      "from hra_jupyter_widgets import ModelViewer"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "### Creating the API Instance \n",
      "We will now create an instance of the API client to use methods provided by the HRA API."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# Client configuration, the default API endpoint is https://apps.humanatlas.io/api\n",
      "configuration = hra_api_client.Configuration(\n",
      "    host = \"https://apps.humanatlas.io/api\" \n",
      ")\n",
      "\n",
      "# Base Client Object\n",
      "api_client = hra_api_client.ApiClient(configuration)\n",
      "\n",
      "# Instance with which to call the primary /v1 routes from our API\n",
      "api_instance = v1_api.V1Api(api_client)\n",
      "\n",
      "# Instance with which to call the /hra-pop routes\n",
      "hra_pop_api_instance = hra_pop_api.HraPopApi(api_client)\n",
      "\n",
      "# Instance with which to call the /ds-graph routes\n",
      "ds_graph_api_instance = ds_graph_api.DsGraphApi(api_client)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## Aggregate statistics\n",
      "To get a quick idea of what data is available in the HRA API, you can use the `aggregate_results` method. With no options, it returns various counts for all default (federated) data."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "api_response = api_instance.aggregate_results()\n",
      "for x in api_response:\n",
      "  print(x.count, x.label)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## Get a session token for HuBMAP data\n",
      "You can limit to certain sets of data by creating a session token. We will create a session for just HuBMAP data. Filters, discussed later, can also be used here to make a smaller set of data for more targeted studies.\n"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# Session configuration. You can add your HuBMAP token after ?token= to get private data\n",
      "session_configuration = { \"dataSources\": [\"https://apps.humanatlas.io/api/ds-graph/hubmap?token=\"] }\n",
      "\n",
      "# Get a session token for this configuration\n",
      "api_response = api_instance.session_token(session_configuration)\n",
      "token=api_response.token\n",
      "print(token)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "After we get the session token, we wait to make sure the session is ready."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "db_ready = False\n",
      "while not db_ready:\n",
      "    api_response = api_instance.db_status(token)\n",
      "    print(api_response)\n",
      "    if api_response.status == 'Ready':\n",
      "        db_ready = True\n",
      "    else:\n",
      "        print('Database not ready yet! Retrying...')\n",
      "        time.sleep(2)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## Examine the HuBMAP data\n",
      "Now we can check the data available in the session we created"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# get aggregate statistics\n",
      "api_response = api_instance.aggregate_results(token=token)\n",
      "for x in api_response:\n",
      "  print(x.count, x.label)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "Let's get all of the tissue blocks (with a RUI location) in HuBMAP"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# get all tissue blocks\n",
      "api_response = api_instance.tissue_blocks(token=token)\n",
      "\n",
      "# print first five block links\n",
      "for x in api_response[0:5]:\n",
      "  print(x.link)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## Filter the HuBMAP data"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "Certain parameters can be used to filter the data. Most methods that query the data have these filters to use:\n",
      "<pre>\n",
      "    age - (MinMax) (optional) (min = 1.0; max = 110.0)\n",
      "    bmi - (MinMax) (optional) (min = 13.0; max = 83.0)\n",
      "    sex - (string)  (optional) (male, female, both)\n",
      "    technologies - (string) (optional) (List of technologies - api_instance.technology_names)\n",
      "    providers - (string) (optional) \n",
      "    ontology_terms - (string) (optional) (List of ontology terms)\n",
      "    cell_type_terms - (string) (optional) (List of ontology tems)\n",
      "    spatial - SpatialSearch(x, y, z, radius, target) (optional) \n",
      "    token - (string) (optional) the session token, if not provided it will use the default dataset\n",
      "</pre>\n",
      "\n",
      "Example instantantiations of the filters are below."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "age = MinMax(min=45.0, max=60.0)\n",
      "bmi = MinMax(min=65.0, max=83.0)\n",
      "sex = \"Female\"\n",
      "technologies = []\n",
      "providers = []\n",
      "ontology_terms = [\"http://purl.obolibrary.org/obo/UBERON_0000955\",]\n",
      "cell_type_terms = [\"http://purl.obolibrary.org/obo/CL_0000000\",] \n",
      "spatial = [SpatialSearch(\n",
      "            x=84.0,\n",
      "            y=146.0,\n",
      "            z=53.0,\n",
      "            radius=12.0,\n",
      "            target=\"https://purl.humanatlas.io/ref-organ/brain-female#primary\"\n",
      "        ),]\n",
      "\n",
      "# get filtered aggregate statistics\n",
      "api_response = api_instance.aggregate_results(\n",
      "                    age=age,\n",
      "                    bmi=bmi, \n",
      "                    ontology_terms=ontology_terms,\n",
      "                    cell_type_terms=cell_type_terms, \n",
      "                    providers=providers,\n",
      "                    sex=sex,\n",
      "                    spatial=spatial,\n",
      "                    technologies=technologies,\n",
      "                    token=token)\n",
      "for x in api_response:\n",
      "  print(x.count, x.label)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "Another way to manage these filters is to create a Dictionary and use python's `**kwargs` syntax to create and pass around a filter object. We'll use this filter object for several methods below."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "filter = {\n",
      "  \"age\": MinMax(min=45.0, max=60.0),\n",
      "  \"bmi\": MinMax(min=65.0, max=83.0),\n",
      "  \"sex\": \"Female\",\n",
      "  \"technologies\": [],\n",
      "  \"providers\": [],\n",
      "  \"ontology_terms\": [\"http://purl.obolibrary.org/obo/UBERON_0000955\"],\n",
      "  \"cell_type_terms\": [\"http://purl.obolibrary.org/obo/CL_0000000\"],\n",
      "  \"spatial\": [\n",
      "    SpatialSearch(\n",
      "      x=84.0,\n",
      "      y=146.0,\n",
      "      z=53.0,\n",
      "      radius=12.0,\n",
      "      target=\"https://purl.humanatlas.io/ref-organ/brain-female#primary\"\n",
      "    )\n",
      "  ]\n",
      "}\n",
      "\n",
      "# get filtered aggregate statistics\n",
      "api_response = api_instance.aggregate_results(token=token, **filter)\n",
      "for x in api_response:\n",
      "  print(x.count, x.label)"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# get anatomical structures that the tissue blocks collided with\n",
      "api_response = api_instance.ontology_term_occurences(token=token, **filter)\n",
      "\n",
      "# Print the first 5 results\n",
      "for (anatomical_structure, count) in list(api_response.items())[0:5]:\n",
      "  print(anatomical_structure, count)"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# get cell types located in anatomical structures that the tissue blocks collided with\n",
      "api_response = api_instance.cell_type_term_occurences(token=token, **filter)\n",
      "\n",
      "# Print the first 5 results\n",
      "for (cell_type, count) in list(api_response.items())[0:5]:\n",
      "  print(cell_type, count)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## Query the HRA Knowledge Graph with SPARQL\n",
      "The HRA API provides a SPARQL endpoint to query the HRA knowledge graph. This allows you to select out very specific data using advanced SPARQL querying. \n",
      "\n",
      "To demonstrate, let's get all the anatomical structures in the latest HRA release."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "query = '''\n",
      "PREFIX ccf: <http://purl.org/ccf/>\n",
      "SELECT ?as ?label\n",
      "FROM <https://purl.humanatlas.io/collection/hra>\n",
      "WHERE {\n",
      "  ?as ccf:ccf_asctb_type ?type ;\n",
      "    ccf:ccf_pref_label ?label .\n",
      "  FILTER(?type = 'AS')\n",
      "}\n",
      "'''\n",
      "api_response = api_instance.sparql(query=query)\n",
      "rows = api_response['results']['bindings']\n",
      "\n",
      "as_lookup = dict([ (row['as']['value'], row['label']['value']) for row in rows ])\n",
      "\n",
      "# Print the first 5 results\n",
      "for (anatomical_structure, label) in list(as_lookup.items())[0:5]:\n",
      "  print(anatomical_structure, label)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "If your SPARQL query is longer (thousands of characters), you can do a SPARQL POST which allows for sending more data."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "api_response = api_instance.sparql_post({'query': query})\n",
      "rows = api_response['results']['bindings']\n",
      "\n",
      "as_lookup = dict([ (row['as']['value'], row['label']['value']) for row in rows ])\n",
      "\n",
      "# Print the first 5 results\n",
      "for (anatomical_structure, label) in list(as_lookup.items())[0:5]:\n",
      "  print(anatomical_structure, label)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## Working with extraction sites (aka RUI locations)\n",
      "After obtaining an extraction site either via the RUI or from queries like above, there are a few things you can do with this data."
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "### Generate a 3D corridor\n",
      "\n",
      "We can compute a corridor from any extraction site. A corridor shows where else an extraction site could go in the same organ and still maintain the same overlaps with anatomical structures. We will take an example extraction site and see what it's corridor looks like."
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "An example extraction site:"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# Provide a RUI location via the RUI at https://apps.humanatlas.io/rui/\n",
      "extraction_site = {\n",
      "    \"@context\": \"https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld\",\n",
      "    \"@id\": \"http://purl.org/ccf/1.5/cc837df1-2788-4510-9c21-9eb0e9b310a5\",\n",
      "    \"@type\": \"SpatialEntity\",\n",
      "    \"creator\": \"demo demo\",\n",
      "    \"creator_first_name\": \"demo\",\n",
      "    \"creator_last_name\": \"demo\",\n",
      "    \"creation_date\": \"2024-08-20\",\n",
      "    \"ccf_annotations\": [\n",
      "        \"http://purl.obolibrary.org/obo/UBERON_0002015\",\n",
      "        \"http://purl.obolibrary.org/obo/UBERON_0002189\"\n",
      "    ],\n",
      "    \"x_dimension\": 10,\n",
      "    \"y_dimension\": 10,\n",
      "    \"z_dimension\": 10,\n",
      "    \"dimension_units\": \"millimeter\",\n",
      "    \"placement\": {\n",
      "        \"@context\": \"https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld\",\n",
      "        \"@id\": \"http://purl.org/ccf/1.5/cc837df1-2788-4510-9c21-9eb0e9b310a5_placement\",\n",
      "        \"@type\": \"SpatialPlacement\",\n",
      "        \"target\": \"https://purl.humanatlas.io/ref-organ/kidney-female-right/v1.3#primary\",\n",
      "        \"placement_date\": \"2024-08-20\",\n",
      "        \"x_scaling\": 1,\n",
      "        \"y_scaling\": 1,\n",
      "        \"z_scaling\": 1,\n",
      "        \"scaling_units\": \"ratio\",\n",
      "        \"x_rotation\": 0,\n",
      "        \"y_rotation\": 0,\n",
      "        \"z_rotation\": 0,\n",
      "        \"rotation_order\": \"XYZ\",\n",
      "        \"rotation_units\": \"degree\",\n",
      "        \"x_translation\": 72.366,\n",
      "        \"y_translation\": 79.067,\n",
      "        \"z_translation\": 34.77,\n",
      "        \"translation_units\": \"millimeter\"\n",
      "    }\n",
      "}"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# Generate a corridor for the extraction site\n",
      "model = api_instance.corridor(extraction_site)\n",
      "\n",
      "# Display it in 3D\n",
      "viewer = ModelViewer(data=model)\n",
      "display(viewer)"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "### Find anatomical structure collisions for an extraction site\n",
      "For any extraction site, we can analyze what anatomical structures it collides with in the 3D reference organ and by how much."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": [
      "# Get mesh-based collisions\n",
      "collisions = api_instance.collisions(extraction_site)\n",
      "\n",
      "pprint(collisions[0:5])"
    ]
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
      "## Conclusion\n",
      "This concludes this tutorial. Refer to the usage notebook [here](https://github.com/x-atlas-consortia/hra-api/blob/main/notebooks/hra-api-client-usage.ipynb) and to the API documentation on <https://apps.humanatlas.io/api/> for additional documentation, methods, and examples. If you have any issues, problems, or questions, feel free to file an issue on the HRA API GitHub at <https://github.com/x-atlas-consortia/hra-api>."
    ]
  }
]
