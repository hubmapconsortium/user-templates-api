[
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "40dd5488",
    "metadata": {},
    "source": [
      "## HRA-API Documentation"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "47b355bd",
    "metadata": {},
    "outputs": [],
    "source": [
      "# linked datasets\n",
      "uuids = {{ uuids | safe }}"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "e2d89b95",
    "metadata": {},
    "source": [
      "# INDEX\n",
      "1. [Installation](#install) \n",
      "2. [Imports](#imports)\n",
      "3. [Configuration](#config)\n",
      "4. [Methods](#methods)\n",
      "    1. [Database Status](#db_status) \n",
      "    2. [Run a Sparql query](#sparql_get) \n",
      "    3. [Run a Sparql query (POST)](#sparql_post) \n",
      "    4. [Get aggregate results / statistics](#agg_results) \n",
      "    5. [Given a SpatialEntity already placed relative to a reference SpatialEntity retrieve a new direct SpatialPlacement to the given SpatialEntity IRI](#spatial_entity)\n",
      "    6. [Get all hubmap rui locations](#rui_loc)\n",
      "    7. [Get number of ontology term occurrences for a search](#ontology_term) \n",
      "    8. [Get number of cell type term occurrences for a search](#cell_term_occ) \n",
      "    9.  [Get ontology term tree nodes](#ontology_nodes) \n",
      "    10. [Get cell type tree nodes](#cell_nodes)\n",
      "    11. [Get tissue provider names (for filtering)](#providers) \n",
      "    12. [Get all reference organs](#ref_organs) \n",
      "    13. [Get all nodes to form the 3D scene for an organ](#3d_scene) \n",
      "    14. [Get all nodes to form the 3D scene of reference body, organs, and tissues](#nodes_3d) \n",
      "    15. [Get technology names (for filtering)](#tech) \n",
      "    16. [Get Tissue Block Results](#tissue_block) \n",
      "    17. [Get all GTEx rui locations (if enabled)](#gtex_rui)\n",
      "    18. [Token](#token_usage) \n",
      "    19. [Generate a 3D corridor](#corridors)\n",
      "    20. [Mesh-Based Collision Detection](#collision)\n",
      "    21. [3D Cell Generation](#3d_cell)\n"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "43773186",
    "metadata": {},
    "source": [
      "<a id='install'></a>\n",
      "### Installation\n",
      "\n",
      "#### hra-api-client can be installed via `pip` from [PyPI](https://pypi.org/project/hra-api-client/#description).\n",
      "***\n",
      "> `pip install hra-api-client`\n",
      "***\n",
      "\n",
      "You may also specify the version number:\n",
      "***\n",
      "> `pip install hra-api-client==0.10.0`\n",
      "***"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "fd9a85aa",
    "metadata": {},
    "source": []
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "c3f1f6d5",
    "metadata": {},
    "source": [
      "<a id='imports'></a>\n",
      "### Imports \n",
      "\n",
      "We import the hra-api-client as follows:"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "e5e21389",
    "metadata": {},
    "outputs": [],
    "source": [
      "import hra_api_client"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "0d6f2a35",
    "metadata": {},
    "source": [
      "Although we can use hra-api-client for all our tasks, it is easier if we have individual imports as follows:"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "d9f69dc1",
    "metadata": {},
    "outputs": [],
    "source": [
      "from hra_api_client.api import v1_api as default_api\n",
      "from hra_api_client.models.aggregate_count import AggregateCount\n",
      "from hra_api_client.models.database_status import DatabaseStatus\n",
      "from hra_api_client.models.error_message import ErrorMessage\n",
      "from hra_api_client.models.flat_spatial_placement import FlatSpatialPlacement\n",
      "from hra_api_client.models.get_spatial_placement_request import GetSpatialPlacementRequest\n",
      "from hra_api_client.models.min_max import MinMax\n",
      "from hra_api_client.models.ontology_tree import OntologyTree\n",
      "from hra_api_client.models.sparql_query_request import SparqlQueryRequest\n",
      "from hra_api_client.models.spatial_entity import SpatialEntity\n",
      "from hra_api_client.models.spatial_scene_node import SpatialSceneNode\n",
      "from hra_api_client.models.spatial_search import SpatialSearch\n",
      "from hra_api_client.models.tissue_block import TissueBlock"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "7c4af109",
    "metadata": {},
    "source": [
      "For the purposes of this documentation we need some other libraries imported here: "
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "3952039c",
    "metadata": {},
    "outputs": [],
    "source": [
      "import time\n",
      "from pprint import pprint\n",
      "from io import StringIO"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "a490f22e",
    "metadata": {},
    "source": [
      "<a id='config'></a>\n",
      "### Configuration\n",
      "The HRA API can fetch data from \n",
      "> HRA-API: https://apps.humanatlas.io/hra-api/v1 <br> \n",
      "> Staging Server: https://apps.humanatlas.io/hra-api--staging/v1 <br>\n",
      "> You could also use any other instance that you decide to host our code on\n",
      "\n",
      "You can get more information about our APIs [here](https://apps.humanatlas.io/hra-api/#/).\n",
      "\n",
      "You'll need to point the host in the configuration to one of the links: "
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "2e090732",
    "metadata": {},
    "outputs": [],
    "source": [
      "# may need to remove `v1`\n",
      "configuration = hra_api_client.Configuration(\n",
      "    host = \"https://apps.humanatlas.io/api\" \n",
      ")"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "9faf09af",
    "metadata": {},
    "source": [
      "<a id='api'></a>\n",
      "### Creating the API Instance \n",
      "We will need to create an instance of ApiClient from hra-api-client. The configuration we created above will be passed as a parameter for the constructor. <br> <br>\n",
      "Using the instance of ApiClient we create an instance of DefaultApi from the default_api module we imported above. This instance represents the API interface and provides methods to interact with the API endpoints defined in the OpenAPI specification."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "3d7b7374",
    "metadata": {},
    "outputs": [],
    "source": [
      "api_client = hra_api_client.ApiClient(configuration)\n",
      "\n",
      "api_instance = default_api.V1Api(api_client)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "ed96d236",
    "metadata": {},
    "source": [
      "<a id='methods'></a>\n",
      "### Methods\n",
      "\n",
      "hra-api-client provides multiple methods which we have described below. Each method is described in more detail below : "
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "4ba8a38f",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='db_status'></a>\n",
      "#### Database Status \n",
      "On first run the database might take some time to be ready, so we run it on loop and wait until it's ready.\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    token - (string) (optional)\n",
      "</pre>\n",
      "***\n",
      "> You can still use the other methods without waiting for the database to be ready, but the initial requests might take a little longer."
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "49d052a1",
    "metadata": {},
    "outputs": [],
    "source": [
      "# replace dict notation with dot notation\n",
      "db_ready = False\n",
      "result = None\n",
      "while not db_ready:\n",
      "    result = api_instance.db_status()\n",
      "    print(result)\n",
      "    if result.status == 'Ready':\n",
      "        db_ready = True\n",
      "    else:\n",
      "        print('Database not ready yet! Retrying...', result)\n",
      "        time.sleep(2)\n",
      "print('Database ready!\\n', result)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "173d4800",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='sparql_get'></a>\n",
      "#### Run a SPARQL query\n",
      "<pre>\n",
      "Accepted Parameters: \n",
      "    token - (string) (optional)\n",
      "    format - (string) (optional) (use only application/json in format, any other formats will result in errors.)\n",
      "    query - (string) (required)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "4a739313",
    "metadata": {},
    "outputs": [],
    "source": [
      "try:\n",
      "    api_response = api_instance.sparql(query='SELECT * WHERE { ?sub ?pred ?obj . } LIMIT 10', format='application/json')\n",
      "    # help(api_instance.sparql)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "230194fd",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='sparql_post'></a>\n",
      "#### Run a SPARQL query (POST) \n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    token - (string) (optional)\n",
      "    format - (string) (optional) (use only application/json in format, any other formats will result in errors.)\n",
      "    sparql_query_request - { \"query\": \"\" } (required)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "b3533391",
    "metadata": {},
    "outputs": [],
    "source": [
      "request = {\"query\": \"SELECT * WHERE { ?sub ?pred ?obj . } LIMIT 10\"}\n",
      "# use only application/json in format, any other formats will result in errors.\n",
      "try:\n",
      "    # help(api_instance.sparql_post)\n",
      "    api_response = api_instance.sparql_post(sparql_query_request=request, format='application/json')\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->sparql_post: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "2e383f49",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='agg_results'></a>\n",
      "#### Get aggregate results / statistics\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    age - (MinMax) (optional) (min = 1.0; max = 110.0)\n",
      "    bmi - (MinMax) (optional) (min = 13.0; max = 83.0)\n",
      "    cache - (boolean)  (optional) (defaults to True)\n",
      "    sex - (string)  (optional) (male, female, both)\n",
      "    technologies - (string) (optional) (List of technologies - api_instance.technology_names)\n",
      "    providers - (string) (optional) \n",
      "    ontology_terms - (string) (optional) \n",
      "    cell_type_terms - (string) (optional) \n",
      "    spatial - SpatialSearch(x, y, z, radius, target) (optional) \n",
      "    token - (string) (optional) \n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "20a78738",
    "metadata": {},
    "outputs": [],
    "source": [
      "age = MinMax(min=45.0, max=60.0)\n",
      "bmi = MinMax(min=65.0, max=83.0)\n",
      "cache = True\n",
      "sex = \"female\"\n",
      "technologies = []\n",
      "providers = []\n",
      "ontology_terms = [\"http://purl.obolibrary.org/obo/UBERON_0000955\",]\n",
      "cell_type_terms = [\"http://purl.obolibrary.org/obo/CL_0000000\",] \n",
      "spatial = [SpatialSearch(\n",
      "            x=84.0,\n",
      "            y=146.0,\n",
      "            z=53.0,\n",
      "            radius=12.0,\n",
      "            target=\"http://purl.org/ccf/latest/ccf.owl#VHFAllenBrain\",\n",
      "        ),]\n",
      "token = \"\"\n",
      "\n",
      "try:\n",
      "    api_response = api_instance.aggregate_results(age=age, bmi=bmi, cache=cache, ontology_terms=ontology_terms, cell_type_terms=cell_type_terms, providers=providers, sex=sex, spatial=spatial, technologies=technologies, token=token)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "bd967bab",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='spatial_entity'></a>\n",
      "#### Given a SpatialEntity already placed relative to a reference SpatialEntity retrieve a new direct SpatialPlacement to the given SpatialEntity IRI &#x274C;\n",
      "More Info : https://apps.humanatlas.io/hra-api/#/operations/get-spatial-placement\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    get_spatial_placement_request = {\n",
      "        \"target_iri\": (string) (required)\n",
      "        \"rui_location\": {\n",
      "            A Spatial Entity defines a bounded cartesian space and the units it is measured in.\n",
      "            It typically represents a real world thing, e.g., a human body, a human kidney, a tissue section,\n",
      "            or an individual cell.\n",
      "            \n",
      "            \"@id\": string<uri> (required)\n",
      "            \"@type\": (string) (required) (allowed value: SpatialEntity)\n",
      "            \n",
      "            \"entityId\": string<uri> (optional) (Identifier of the entity the spatial object represents)\n",
      "            \"ccf_annotations\": array[string]<uri> (optional) (Annotations attached to the entity.)\n",
      "            \"representation_of\": string<uri> (optional) (Identifier for the item the spatial object represents.)\n",
      "            \"reference_organ\": string<uri> (optional) (Identifier for the organ the spatial object represents.)\n",
      "            \n",
      "            \"creator\": (string) (optional)\n",
      "            \"creator_first_name\": (string) (optional)\n",
      "            \"creator_last_name\": (string) (optional)\n",
      "            \"creator_orcid\": (string) (optional)\n",
      "            \"creation_date\": (string)<date>,\n",
      "            \n",
      "            \"x_dimension\": (number) (required),\n",
      "            \"y_dimension\": (number) (required),\n",
      "            \"z_dimension\": (number) (required),\n",
      "            \"dimension_units\": (string) (required) (default: millimeters),\n",
      "            \n",
      "            \"label\": (string) (optional)\n",
      "            \"comment\": (string) (optional)\n",
      "            \"rui_rank\": (integer) (optional)\n",
      "            \"sex\": (string) (optional)\n",
      "            \"side\": (string) (optional) (Used for organs that come in pairs to distinguish between them, i.e. kidneys, etc)\n",
      "            \"slice_count\": (integer) (optional)\n",
      "            \"slice_thickness\": (number) (optional)\n",
      "            \n",
      "            \n",
      "            \"placement\": {\n",
      "                \"@id\": (string) (required),\n",
      "                \"@type\": (string) (required) (allowed value: SpatialEntity),\n",
      "                \"placement_date\": string<date>,\n",
      "                \"x_translation\": (number) (required),\n",
      "                \"y_translation\": (number) (required),\n",
      "                \"z_translation\": (number) (required),\n",
      "                \"translation_units\": (number) (required) (allowed value: millimeters),\n",
      "                \"x_rotation\": (number) (required),\n",
      "                \"y_rotation\": (number) (required),\n",
      "                \"z_rotation\": (number) (required),\n",
      "                \"rotation_units\": (string) (required) (allowed value: degree),\n",
      "                \"x_scaling\": (number) (required),\n",
      "                \"y_scaling\": (number) (required),\n",
      "                \"z_scaling\": (number)  (optional),\n",
      "                \"scaling_units\": (string) (required) (allowed value: degree),\n",
      "                \"target\": (string) (required),\n",
      "        }\n",
      "            \n",
      "        }\n",
      "    }\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "4de04419",
    "metadata": {},
    "outputs": [],
    "source": [
      "get_spatial_placement_request = {\n",
      "    \"target_iri\": \"http://purl.org/ccf/latest/ccf.owl#VHFemale\",\n",
      "    \"rui_location\": {\n",
      "        \"@id\": \"http://purl.org/ccf/1.5/f7130161-ad0a-4801-b5a4-f6297e0f1869\",\n",
      "        \"@type\": \"SpatialEntity\",\n",
      "        \"creator\": \"Bruce Herr\",\n",
      "        \"creator_first_name\": \"Bruce\",\n",
      "        \"creator_last_name\": \"Herr\",\n",
      "        \"creation_date\": \"2022-04-27\",\n",
      "        \"ccf_annotations\": [\"http://purl.obolibrary.org/obo/UBERON_0002015\", \"http://purl.obolibrary.org/obo/UBERON_0000362\", \"http://purl.obolibrary.org/obo/UBERON_0004200\", \"http://purl.obolibrary.org/obo/UBERON_0001225\", \"http://purl.obolibrary.org/obo/UBERON_0001284\", \"http://purl.obolibrary.org/obo/UBERON_0002189\"],\n",
      "        \"x_dimension\": 11,\n",
      "        \"y_dimension\": 12,\n",
      "        \"z_dimension\": 13,\n",
      "        \"dimension_units\": \"millimeter\",\n",
      "        \"placement\": {\n",
      "            \"@id\": \"http://purl.org/ccf/1.5/f7130161-ad0a-4801-b5a4-f6297e0f1869_placement\",\n",
      "            \"@type\": \"SpatialPlacement\",\n",
      "            \"target\": \"http://purl.org/ccf/latest/ccf.owl#VHFLeftKidneyV1.1\",\n",
      "            \"placement_date\": \"2022-04-27\",\n",
      "            \"x_scaling\": 1,\n",
      "            \"y_scaling\": 1,\n",
      "            \"z_scaling\": 1,\n",
      "            \"scaling_units\": \"ratio\",\n",
      "            \"x_rotation\": -61,\n",
      "            \"y_rotation\": 50,\n",
      "            \"z_rotation\": -84,\n",
      "            \"rotation_order\": \"XYZ\",\n",
      "            \"rotation_units\": \"degree\",\n",
      "            \"x_translation\": 20.149,\n",
      "            \"y_translation\": 109.963,\n",
      "            \"z_translation\": 38.79,\n",
      "            \"translation_units\": \"millimeter\"\n",
      "        }\n",
      "    }\n",
      "}\n",
      "try:\n",
      "    # Get spatial placement\n",
      "    api_response = api_instance.get_spatial_placement(get_spatial_placement_request)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->get_spatial_placement: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "0a2c6460",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='rui_loc'></a>\n",
      "#### Get all hubmap rui locations (if enabled)\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    cache - (boolean) (optional)\n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "f15c90b1",
    "metadata": {},
    "outputs": [],
    "source": [
      "try:\n",
      "    api_response = api_instance.gtex_rui_locations(cache = True)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "6e6fc39a",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='ontology_term'></a>\n",
      "#### Get number of ontology term occurrences for a search\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    age - (MinMax) (optional) (min = 1.0; max = 110.0)\n",
      "    bmi - (MinMax) (optional) (min = 13.0; max = 83.0)\n",
      "    cache - (boolean)  (optional) (defaults to True)\n",
      "    sex - (string)  (optional) (male, female, both)\n",
      "    technologies - (string) (optional) (List of technologies - api_instance.technology_names)\n",
      "    providers - (string) (optional) \n",
      "    ontology_terms - (string) (optional) \n",
      "    cell_type_terms - (string) (optional) \n",
      "    spatial - SpatialSearch(x, y, z, radius, target) (optional) \n",
      "    token - (string) (optional) \n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "dabe4526",
    "metadata": {},
    "outputs": [],
    "source": [
      "age = MinMax(min=45.0, max=60.0)\n",
      "bmi = MinMax(min=65.0, max=83.0)\n",
      "cache = True\n",
      "sex = \"female\"\n",
      "technologies = []\n",
      "providers = []\n",
      "ontology_terms = [\"http://purl.obolibrary.org/obo/UBERON_0000955\",]\n",
      "cell_type_terms = [\"http://purl.obolibrary.org/obo/CL_0000000\",] \n",
      "spatial = [SpatialSearch(\n",
      "            x=84.0,\n",
      "            y=146.0,\n",
      "            z=53.0,\n",
      "            radius=12.0,\n",
      "            target=\"http://purl.org/ccf/latest/ccf.owl#VHFAllenBrain\",\n",
      "        ),]\n",
      "token = \"\"\n",
      "\n",
      "try:\n",
      "    api_response = api_instance.ontology_term_occurences(age=age, bmi=bmi, cache=cache, ontology_terms=ontology_terms, cell_type_terms=cell_type_terms, providers=providers, sex=sex, spatial=spatial, technologies=technologies, token=token)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "ae1132cc",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='cell_term_occ'></a>\n",
      "#### Get number of cell type term occurrences for a search\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    age - (MinMax) (optional) (min = 1.0; max = 110.0)\n",
      "    bmi - (MinMax) (optional) (min = 13.0; max = 83.0)\n",
      "    cache - (boolean)  (optional) (defaults to True)\n",
      "    sex - (string)  (optional) (male, female, both)\n",
      "    technologies - (string) (optional) (List of technologies - api_instance.technology_names)\n",
      "    providers - (string) (optional) \n",
      "    ontology_terms - (string) (optional) \n",
      "    cell_type_terms - (string) (optional) \n",
      "    spatial - SpatialSearch(x, y, z, radius, target) (optional) \n",
      "    token - (string) (optional) \n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "db1e1ebd",
    "metadata": {},
    "outputs": [],
    "source": [
      "age = MinMax(min=45.0, max=60.0)\n",
      "bmi = MinMax(min=65.0, max=83.0)\n",
      "cache = True\n",
      "sex = \"female\"\n",
      "technologies = []\n",
      "providers = []\n",
      "ontology_terms = [\"http://purl.obolibrary.org/obo/UBERON_0000955\",]\n",
      "cell_type_terms = [\"http://purl.obolibrary.org/obo/CL_0000000\",] \n",
      "spatial = [SpatialSearch(\n",
      "            x=84.0,\n",
      "            y=146.0,\n",
      "            z=53.0,\n",
      "            radius=12.0,\n",
      "            target=\"http://purl.org/ccf/latest/ccf.owl#VHFAllenBrain\",\n",
      "        ),]\n",
      "token = \"\"\n",
      "\n",
      "try:\n",
      "    api_response = api_instance.cell_type_term_occurences(age=age, bmi=bmi, cache=cache, ontology_terms=ontology_terms, cell_type_terms=cell_type_terms, providers=providers, sex=sex, spatial=spatial, technologies=technologies, token=token)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "0e8bd39d",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='ontology_nodes'></a>\n",
      "#### Get ontology term tree nodes\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    cache - (boolean) (optional)\n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "7d5e5dd0",
    "metadata": {},
    "outputs": [],
    "source": [
      "try:\n",
      "    api_response = api_instance.ontology_tree_model(cache=True)\n",
      "    for item in api_response:\n",
      "        pprint(item)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "7170f6f3",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='cell_nodes'></a>\n",
      "#### Get cell type tree nodes\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    cache - (boolean) (optional)\n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "e27e8ac1",
    "metadata": {},
    "outputs": [],
    "source": [
      "try:\n",
      "    api_response = api_instance.cell_type_tree_model(cache = False)\n",
      "    for item in api_response:\n",
      "        pprint(item)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "0965c71e",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='providers'></a>\n",
      "#### Get tissue provider names (for filtering)\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    cache - (boolean) (optional)\n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "5ff1a305",
    "metadata": {},
    "outputs": [],
    "source": [
      "try:\n",
      "    api_response = api_instance.provider_names(cache = True)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "1537015d",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='ref_organs'></a>\n",
      "#### Get all reference organs\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    cache - (boolean) (optional)\n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "eeaf481b",
    "metadata": {},
    "outputs": [],
    "source": [
      "try:\n",
      "    api_response = api_instance.reference_organs(cache = True)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "1b602f81",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='3d_scene'></a>\n",
      "#### Get all nodes to form the 3D scene for an organ\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    age - (MinMax) (optional) (min = 1.0; max = 110.0)\n",
      "    bmi - (MinMax) (optional) (min = 13.0; max = 83.0)\n",
      "    cache - (boolean)  (optional) (defaults to True)\n",
      "    sex - (string)  (optional) (male, female, both)\n",
      "    technologies - (string) (optional) (List of technologies - api_instance.technology_names)\n",
      "    providers - (string) (optional) \n",
      "    ontology_terms - (string) (optional) \n",
      "    cell_type_terms - (string) (optional) \n",
      "    spatial - SpatialSearch(x, y, z, radius, target) (optional) \n",
      "    token - (string) (optional)\n",
      "    organ-iri - (string) (required)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "87710b53",
    "metadata": {},
    "outputs": [],
    "source": [
      "age = MinMax(min=45.0, max=60.0)\n",
      "bmi = MinMax(min=65.0, max=83.0)\n",
      "cache = True\n",
      "sex = \"female\"\n",
      "technologies = []\n",
      "providers = []\n",
      "ontology_terms = [\"http://purl.obolibrary.org/obo/UBERON_0000955\",]\n",
      "cell_type_terms = [\"http://purl.obolibrary.org/obo/CL_0000000\",] \n",
      "spatial = [SpatialSearch(\n",
      "            x=84.0,\n",
      "            y=146.0,\n",
      "            z=53.0,\n",
      "            radius=12.0,\n",
      "            target=\"http://purl.org/ccf/latest/ccf.owl#VHFAllenBrain\",\n",
      "        ),]\n",
      "organ_iri = \"http://purl.obolibrary.org/obo/UBERON_0004539\"\n",
      "token = \"\"\n",
      "\n",
      "try:\n",
      "    # Get aggregate results / statistics\n",
      "    api_response = api_instance.reference_organ_scene(organ_iri=organ_iri, age=age, bmi=bmi, cache=cache, ontology_terms=ontology_terms, cell_type_terms=cell_type_terms, providers=providers, sex=sex, spatial=spatial, technologies=technologies, token=token\n",
      ")\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "1afabd89",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='nodes_3d'></a>\n",
      "#### Get all nodes to form the 3D scene of reference body, organs, and tissues\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    age - (MinMax) (optional) (min = 1.0; max = 110.0)\n",
      "    bmi - (MinMax) (optional) (min = 13.0; max = 83.0)\n",
      "    cache - (boolean)  (optional) (defaults to True)\n",
      "    sex - (string)  (optional) (male, female, both)\n",
      "    technologies - (string) (optional) (List of technologies - api_instance.technology_names)\n",
      "    providers - (string) (optional) \n",
      "    ontology_terms - (string) (optional) \n",
      "    cell_type_terms - (string) (optional) \n",
      "    spatial - SpatialSearch(x, y, z, radius, target) (optional) \n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "2160f41b",
    "metadata": {},
    "outputs": [],
    "source": [
      "age = MinMax(min=45.0, max=60.0)\n",
      "bmi = MinMax(min=65.0, max=83.0)\n",
      "cache = True\n",
      "sex = \"female\"\n",
      "technologies = []\n",
      "providers = []\n",
      "ontology_terms = [\"http://purl.obolibrary.org/obo/UBERON_0000955\",]\n",
      "cell_type_terms = [\"http://purl.obolibrary.org/obo/CL_0000000\",] \n",
      "spatial = [SpatialSearch(\n",
      "            x=84.0,\n",
      "            y=146.0,\n",
      "            z=53.0,\n",
      "            radius=12.0,\n",
      "            target=\"http://purl.org/ccf/latest/ccf.owl#VHFAllenBrain\",\n",
      "        ),]\n",
      "token = \"\"\n",
      "\n",
      "try:\n",
      "    # Get aggregate results / statistics\n",
      "    api_response = api_instance.scene(age=age, bmi=bmi, cache=cache, ontology_terms=ontology_terms, cell_type_terms=cell_type_terms, providers=providers, sex=sex, spatial=spatial, technologies=technologies, token=token\n",
      ")\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "8e0e94cb",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='tech'></a>\n",
      "#### Get technology names (for filtering)\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    cache - (boolean) (optional)\n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "3f79894f",
    "metadata": {},
    "outputs": [],
    "source": [
      "try:\n",
      "    api_response = api_instance.technology_names(cache = False)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "80c2337f",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='tissue_block'></a>\n",
      "#### Get Tissue Block Results\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    age - (MinMax) (optional) (min = 1.0; max = 110.0)\n",
      "    bmi - (MinMax) (optional) (min = 13.0; max = 83.0)\n",
      "    cache - (boolean)  (optional) (defaults to True)\n",
      "    sex - (string)  (optional) (male, female, both)\n",
      "    technologies - (string) (optional) (List of technologies - api_instance.technology_names)\n",
      "    providers - (string) (optional) \n",
      "    ontology_terms - (string) (optional) \n",
      "    cell_type_terms - (string) (optional) \n",
      "    spatial - SpatialSearch(x, y, z, radius, target) (optional) \n",
      "    token - (string) (optional)\n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "8f690344",
    "metadata": {},
    "outputs": [],
    "source": [
      "age = MinMax(min=45.0, max=60.0)\n",
      "bmi = MinMax(min=65.0, max=83.0)\n",
      "cache = True\n",
      "sex = \"female\"\n",
      "technologies = []\n",
      "providers = []\n",
      "ontology_terms = [\"http://purl.obolibrary.org/obo/UBERON_0000955\",]\n",
      "cell_type_terms = [\"http://purl.obolibrary.org/obo/CL_0000000\",] \n",
      "spatial = [SpatialSearch(\n",
      "            x=84.0,\n",
      "            y=146.0,\n",
      "            z=53.0,\n",
      "            radius=12.0,\n",
      "            target=\"http://purl.org/ccf/latest/ccf.owl#VHFAllenBrain\",\n",
      "        ),]\n",
      "token = \"\"\n",
      "\n",
      "try:\n",
      "    api_response = api_instance.tissue_blocks(age=age, bmi=bmi, cache=cache, ontology_terms=ontology_terms, cell_type_terms=cell_type_terms, providers=providers, sex=sex, spatial=spatial, technologies=technologies, token=token\n",
      ")\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "9cafd1d8",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='gtex_rui'></a>\n",
      "#### Get all GTEx rui locations (if enabled)\n",
      "<pre>\n",
      "Accepted Parameters:\n",
      "    cache - (boolean) (optional) \n",
      "</pre>"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "3af8f4db",
    "metadata": {},
    "outputs": [],
    "source": [
      "try: \n",
      "    api_response = api_instance.gtex_rui_locations(cache = False)\n",
      "    pprint(api_response)\n",
      "except hra_api_client.ApiException as e:\n",
      "    print(\"Exception when calling DefaultApi->aggregate_results: %s\\n\" % e)"
    ]
  },
  {
    "attachments": {},
    "cell_type": "markdown",
    "id": "1484a7ff",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='token_usage'></a>\n",
      "#### Token Usage"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "a6157188",
    "metadata": {},
    "outputs": [],
    "source": [
      "token = 'abbee123099245'\n",
      "result = api_instance.db_status(token=token)\n",
      "pprint(result)"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "acbf417a",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='corridors'></a>\n",
      "#### Generate a 3D corridor"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "4753f26a",
    "metadata": {},
    "outputs": [],
    "source": [
      "# Provide a RUI location via the RUI at https://apps.humanatlas.io/rui/\n",
      "extraction_site = {\n",
      "    \"@context\": \"https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld\",\n",
      "    \"@id\": \"http://purl.org/ccf/1.5/cc837df1-2788-4510-9c21-9eb0e9b310a5\",\n",
      "    \"@type\": \"SpatialEntity\",\n",
      "    \"creator\": \"demo demo\",\n",
      "    \"creator_first_name\": \"demo\",\n",
      "    \"creator_last_name\": \"demo\",\n",
      "    \"creation_date\": \"2024-08-20\",\n",
      "    \"ccf_annotations\": [\n",
      "        \"http://purl.obolibrary.org/obo/UBERON_0002015\",\n",
      "        \"http://purl.obolibrary.org/obo/UBERON_0002189\"\n",
      "    ],\n",
      "    \"x_dimension\": 10,\n",
      "    \"y_dimension\": 10,\n",
      "    \"z_dimension\": 10,\n",
      "    \"dimension_units\": \"millimeter\",\n",
      "    \"placement\": {\n",
      "        \"@context\": \"https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld\",\n",
      "        \"@id\": \"http://purl.org/ccf/1.5/cc837df1-2788-4510-9c21-9eb0e9b310a5_placement\",\n",
      "        \"@type\": \"SpatialPlacement\",\n",
      "        \"target\": \"https://purl.humanatlas.io/ref-organ/kidney-female-right/v1.3#primary\",\n",
      "        \"placement_date\": \"2024-08-20\",\n",
      "        \"x_scaling\": 1,\n",
      "        \"y_scaling\": 1,\n",
      "        \"z_scaling\": 1,\n",
      "        \"scaling_units\": \"ratio\",\n",
      "        \"x_rotation\": 0,\n",
      "        \"y_rotation\": 0,\n",
      "        \"z_rotation\": 0,\n",
      "        \"rotation_order\": \"XYZ\",\n",
      "        \"rotation_units\": \"degree\",\n",
      "        \"x_translation\": 72.366,\n",
      "        \"y_translation\": 79.067,\n",
      "        \"z_translation\": 34.77,\n",
      "        \"translation_units\": \"millimeter\"\n",
      "    }\n",
      "}\n",
      "\n",
      "# POST the extraction site\n",
      "model = api_instance.corridor(extraction_site)"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "09075bd6",
    "metadata": {},
    "source": [
      "Save corridor to file:"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "74fcb536",
    "metadata": {},
    "outputs": [],
    "source": [
      "corridor_file_name = \"corridor.glb\"\n",
      "\n",
      "# \"ab\" mode to append\n",
      "with open(corridor_file_name, \"wb\") as binary_file:\n",
      "\n",
      "    # Write bytes to file\n",
      "    binary_file.write(model)"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "a7c4fad1",
    "metadata": {},
    "source": [
      "##### Display with `pyvista`"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "fdb827fe",
    "metadata": {},
    "source": [
      "Make sure to run:\n",
      "`pip install \"pyvista[jupyter]\"`"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "073db386",
    "metadata": {},
    "outputs": [],
    "source": [
      "import pyvista\n",
      "from pyvista import examples\n",
      "from itkwidgets import view\n",
      "\n",
      "pl = pyvista.Plotter()\n",
      "pl.import_gltf(corridor_file_name)\n",
      "pl.camera.zoom(1.0)\n",
      "pl.show()"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "6ceb5a43",
    "metadata": {},
    "source": [
      "##### Display with `k3d`/`vtk`"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "3d232ee1",
    "metadata": {},
    "outputs": [],
    "source": [
      "import k3d\n",
      "import vtk\n",
      "import ipywidgets as widgets\n",
      "\n",
      "reader = vtk.vtkGLTFReader()\n",
      "reader.SetFileName(corridor_file_name)\n",
      "reader.Update()\n",
      "\n",
      "plot = k3d.plot()\n",
      "mb = reader.GetOutput()\n",
      "\n",
      "iterator = mb.NewIterator()\n",
      "\n",
      "vtk_polyobjects = []\n",
      "while not iterator.IsDoneWithTraversal():\n",
      "    item = iterator.GetCurrentDataObject()\n",
      "    vtk_polyobjects.append(item)\n",
      "    iterator.GoToNextItem()\n",
      "\n",
      "\n",
      "for obj in vtk_polyobjects:\n",
      "    plot += k3d.vtk_poly_data(obj, color=0x222222)\n",
      "plot.display()\n",
      "\n",
      "debug_info = widgets.HTML()"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "ebd70311",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='collision'></a>\n",
      "#### Mesh-Based Collision Detection"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "8fe568bf",
    "metadata": {},
    "outputs": [],
    "source": [
      "# Provide a RUI location via the RUI at https://apps.humanatlas.io/rui/\n",
      "extraction_site = {\n",
      "    \"@context\": \"https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld\",\n",
      "    \"@id\": \"http://purl.org/ccf/1.5/cc837df1-2788-4510-9c21-9eb0e9b310a5\",\n",
      "    \"@type\": \"SpatialEntity\",\n",
      "    \"creator\": \"demo demo\",\n",
      "    \"creator_first_name\": \"demo\",\n",
      "    \"creator_last_name\": \"demo\",\n",
      "    \"creation_date\": \"2024-08-20\",\n",
      "    \"ccf_annotations\": [\n",
      "        \"http://purl.obolibrary.org/obo/UBERON_0002015\",\n",
      "        \"http://purl.obolibrary.org/obo/UBERON_0002189\"\n",
      "    ],\n",
      "    \"x_dimension\": 10,\n",
      "    \"y_dimension\": 10,\n",
      "    \"z_dimension\": 10,\n",
      "    \"dimension_units\": \"millimeter\",\n",
      "    \"placement\": {\n",
      "        \"@context\": \"https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld\",\n",
      "        \"@id\": \"http://purl.org/ccf/1.5/cc837df1-2788-4510-9c21-9eb0e9b310a5_placement\",\n",
      "        \"@type\": \"SpatialPlacement\",\n",
      "        \"target\": \"https://purl.humanatlas.io/ref-organ/kidney-female-right/v1.3#primary\",\n",
      "        \"placement_date\": \"2024-08-20\",\n",
      "        \"x_scaling\": 1,\n",
      "        \"y_scaling\": 1,\n",
      "        \"z_scaling\": 1,\n",
      "        \"scaling_units\": \"ratio\",\n",
      "        \"x_rotation\": 0,\n",
      "        \"y_rotation\": 0,\n",
      "        \"z_rotation\": 0,\n",
      "        \"rotation_order\": \"XYZ\",\n",
      "        \"rotation_units\": \"degree\",\n",
      "        \"x_translation\": 72.366,\n",
      "        \"y_translation\": 79.067,\n",
      "        \"z_translation\": 34.77,\n",
      "        \"translation_units\": \"millimeter\"\n",
      "    }\n",
      "}\n",
      "\n",
      "# Get mesh-based collisions\n",
      "pprint(api_instance.collisions(extraction_site))"
    ]
  },
  {
    "cell_type": "markdown",
    "id": "13760167",
    "metadata": {},
    "source": [
      "***\n",
      "<a id='3d_cell'></a>\n",
      "#### 3D Cell Generation"
    ]
  },
  {
    "cell_type": "code",
    "execution_count": null,
    "id": "9773778c",
    "metadata": {},
    "outputs": [],
    "source": [
      "# import pandas to convert API response into a DataFrame for easier downstream handling\n",
      "import pandas as pd\n",
      "\n",
      "# Create your request parameters\n",
      "params = {\n",
      "    \"file\": \"https://cdn.humanatlas.io/digital-objects/ref-organ/kidney-female-left/v1.3/assets/3d-vh-f-kidney-l.glb\",\n",
      "    \"file_subpath\": \"VH_F_renal_pyramid_L_a\",\n",
      "    \"num_nodes\": 10,\n",
      "    \"node_distribution\": {\n",
      "        \"KEY1\": 0.1,\n",
      "        \"KEY2\": 0.3\n",
      "    }\n",
      "}\n",
      "\n",
      "# The result is a list of objects with x, y, z positions and types, accoording to the distribution and number of nodes specified in the parameters\n",
      "response = api_instance.mesh3d_cell_population(params)\n",
      "\n",
      "# Convert to string\n",
      "as_string = str(response, 'utf-8')\n",
      "\n",
      "# Convert the string to a DataFrame\n",
      "df = pd.read_csv(StringIO(as_string))\n",
      "\n",
      "# Display the DataFrame\n",
      "print(df)"
    ]
  }
]
