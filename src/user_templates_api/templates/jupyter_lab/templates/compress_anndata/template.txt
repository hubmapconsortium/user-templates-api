{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compress anndata files\n",
    "H5ad files with anndata are large and may be hard to move around. This notebook shows how to resave h5ad files with partial anndata."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pandas anndata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import anndata as ad"
   ]
  },
  {% jupyter_get_uuid_cells %},
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compress_anndata_delete(adata_i, groups): \n",
    "    '''\n",
    "    For an anndata object, match object names in groups to their object on the anndata object and delete them. \n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    adata_i : anndata\n",
    "    groups: list of str\n",
    "        list of groups of anndata to be discard\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    anndata : anndata object without objects in groups\n",
    "    '''\n",
    "    if \"X\" in groups: \n",
    "        del adata_i.X\n",
    "    if \"obs\" in groups: \n",
    "        del adata_i.obs\n",
    "    if \"var\" in groups:\n",
    "        del adata_i.var\n",
    "    if \"uns\" in groups: \n",
    "        del adata_i.uns\n",
    "    if \"obsm\" in groups: \n",
    "        del adata_i.obsm\n",
    "    if \"varm\" in groups: \n",
    "        del adata_i.varm\n",
    "    if \"layers\" in groups: \n",
    "        del adata_i.layers\n",
    "    if \"raw\" in groups: \n",
    "        del adata_i.raw\n",
    "    if \"obsp\" in groups: \n",
    "        del adata_i.obsp\n",
    "    if \"varp\" in groups: \n",
    "        del adata_i.varp\n",
    "    return adata_i\n",
    "\n",
    "\n",
    "def compress_anndata(uuid, file, data_path, compressed_data_path, groups = [\"uns\", \"obsm\", \"varm\", \"layers\", \"raw\", \"obsp\", \"varp\"]):\n",
    "    '''\n",
    "    For a list of uuids, retrieve anndata from h5ad and remove various attributes for compression, write to new h5ad.\n",
    "\n",
    "    This function assumes the following folder structure under data_path: \n",
    "    \n",
    "    data_path\n",
    "    |\n",
    "    |-- uuid1\n",
    "        |\n",
    "        |-- file\n",
    "    |-- uuid2\n",
    "        |\n",
    "        |--file\n",
    "\n",
    "    By default, this function only keeps the X matrix and obs and var objects.\n",
    "\n",
    "    All groups: [\"X\", \"obs\", \"var\", \"uns\", \"obsm\", \"varm\", \"layers\", \"raw\", \"obsp\", \"varp\"]\n",
    "    (https://anndata.readthedocs.io/en/latest/generated/anndata.AnnData.html)\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    uuids : list of str\n",
    "        list of uuids for which to retrieve data\n",
    "    file : str\n",
    "        h5ad file to target\n",
    "    data_path : str\n",
    "        path to data folder\n",
    "    compressed_data_path : str\n",
    "        path to new compressed data folder\n",
    "    groups: list of str, optional\n",
    "        list of groups of anndata to be discard\n",
    "        (default [\"uns\", \"obsm\", \"varm\", \"layers\", \"raw\", \"obsp\", \"varp\"])\n",
    "    '''\n",
    "    ## read in anndata\n",
    "    path = data_path + uuid + '/' + file\n",
    "    if not os.path.exists(path): \n",
    "        raise FileExistsError\n",
    "    adata_i = ad.read(path)\n",
    "\n",
    "    ## compress anndata\n",
    "    adata_i = compress_anndata_delete(adata_i, groups)\n",
    "    \n",
    "    ## make new folder for output\n",
    "    os.makedirs(compressed_data_path + uuid, exist_ok=True) \n",
    "\n",
    "    ## write compressed anndata object to new h5ad file\n",
    "    adata_i.write(filename = compressed_data_path + uuid + '/' + file)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: keep only X and obs in anndata."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_path = './datasets/'\n",
    "compressed_data_path = './datasets-compressed/'\n",
    "\n",
    "for uuid in uuids: \n",
    "    compress_anndata(uuid, 'secondary_analysis.h5ad', data_path, compressed_data_path, groups = [\"uns\", \"obsm\", \"varm\", \"layers\", \"raw\", \"obsp\", \"varp\"])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
